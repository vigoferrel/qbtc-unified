#!/usr/bin/env node

require('dotenv').config();
const { BinanceConnectionValidator } = require('./BinanceConnectionValidator');

async function checkBalance() {
    console.log('üîç Verificando balance actual en Binance Futures...');
    console.log('‚è∞ Timestamp:', new Date().toISOString());
    console.log('');

    try {
        // Inicializar el validador de conexi√≥n
        const validator = new BinanceConnectionValidator();
        
        console.log('üì° Validando conexi√≥n completa a Binance Futures API...');
        
        // Validar conexi√≥n completa
        const validation = await validator.validateBinanceConnection();
        
        if (!validation.success) {
            console.error('‚ùå Validaci√≥n de conexi√≥n fall√≥:');
            validation.errors.forEach(error => console.error(`   ‚Ä¢ ${error}`));
            if (validation.warnings.length > 0) {
                console.warn('‚ö†Ô∏è Advertencias:');
                validation.warnings.forEach(warning => console.warn(`   ‚Ä¢ ${warning}`));
            }
            process.exit(1);
        }
        
        console.log('‚úÖ Conexi√≥n validada exitosamente');
        if (validation.serverTime) {
            console.log('   Hora del servidor:', new Date(validation.serverTime).toISOString());
        }
        console.log('');
        
        // Mostrar informaci√≥n de la cuenta si est√° disponible
        if (validation.accountInfo) {
            console.log('='.repeat(60));
            console.log('üí∞ BALANCE DE CUENTA - BINANCE FUTURES');
            console.log('='.repeat(60));
            
            const accountInfo = validation.accountInfo;
            console.log(`üíµ Balance USDT total: ${accountInfo.totalWalletBalance} USDT`);
            console.log(`üíµ Balance disponible: ${accountInfo.availableBalance} USDT`);
            console.log('');
            
            if (validation.balances) {
                console.log('üìà Balance por activos:');
                validation.balances.forEach(balance => {
                    console.log(`   ${balance.asset}: ${balance.walletBalance} (Disponible: ${balance.availableBalance})`);
                });
            }
            
            console.log('');
            console.log('üìä Informaci√≥n adicional de cuenta:');
            console.log(`   Tier de comisiones: ${accountInfo.feeTier}`);
            console.log(`   Margen total: ${accountInfo.totalMarginBalance} USDT`);
            console.log(`   PNL no realizado: ${accountInfo.totalUnrealizedProfit} USDT`);
            console.log(`   Margen de posiciones: ${accountInfo.totalPositionInitialMargin} USDT`);
            console.log(`   Margen de √≥rdenes: ${accountInfo.totalOpenOrderInitialMargin} USDT`);
            
            // Verificar si hay posiciones abiertas
            if (validation.positions && validation.positions.length > 0) {
                console.log('');
                console.log('üìà Posiciones actuales:');
                validation.positions.forEach(pos => {
                    console.log(`   ${pos.symbol}: ${pos.positionAmt} (PNL: ${pos.unrealizedProfit} USDT)`);
                });
            } else {
                console.log('');
                console.log('üìà No hay posiciones abiertas actualmente');
            }
        }
        
        // Mostrar informaci√≥n de allocation si est√° disponible
        if (validation.allocation) {
            console.log('');
            console.log('='.repeat(60));
            console.log('üìä ALLOCATION RECOMENDADO');
            console.log('='.repeat(60));
            
            const allocation = validation.allocation;
            console.log(`üí∏ Capital disponible para trading: ${allocation.tradingCapital} USDT`);
            console.log(`üéØ Tama√±o m√°ximo por posici√≥n: ${allocation.maxPositionSize} USDT`);
            console.log(`‚ö†Ô∏è Riesgo m√°ximo por trade: ${allocation.maxRiskPerTrade} USDT`);
            console.log(`üõ°Ô∏è Reserva de seguridad: ${allocation.safetyReserve} USDT`);
            console.log(`üìä Max simultaneous positions: ${allocation.maxSimultaneousPositions}`);
            
            // Mostrar allocation por categor√≠a si est√° disponible
            if (allocation.categoryAllocation) {
                console.log('');
                console.log('üìã Allocation por categor√≠a:');
                Object.entries(allocation.categoryAllocation).forEach(([category, value]) => {
                    console.log(`   ${category}: ${value.percentage}% (${value.amount} USDT)`);
                });
            }
        }
        
        // Informaci√≥n de estado del sistema Leonardo
        console.log('');
        console.log('üéØ Estado del sistema Leonardo:');
        console.log(`   Balance m√≠nimo requerido: ${process.env.MIN_BALANCE_USDT || 100} USDT`);
        console.log(`   Bait amount configurado: ${process.env.BAIT_AMOUNT || 10} USDT`);
        console.log(`   Max leverage: ${process.env.TRADING_MAX_LEVERAGE || 125}x`);
        console.log(`   Trading real habilitado: ${process.env.REAL_TRADING_ENABLED || 'false'}`);
        
        // Verificar si el balance es suficiente para operar
        if (validation.accountInfo) {
            const minBalance = parseFloat(process.env.MIN_BALANCE_USDT || 100);
            const currentBalance = validation.accountInfo.availableBalance;
            
            console.log('');
            console.log('='.repeat(60));
            if (currentBalance >= minBalance) {
                console.log('‚úÖ BALANCE SUFICIENTE PARA OPERAR');
                console.log(`   Balance actual: ${currentBalance} USDT >= M√≠nimo requerido: ${minBalance} USDT`);
            } else {
                console.log('‚ö†Ô∏è  BALANCE INSUFICIENTE');
                console.log(`   Balance actual: ${currentBalance} USDT < M√≠nimo requerido: ${minBalance} USDT`);
            }
            console.log('='.repeat(60));
        }
        
    } catch (error) {
        console.error('‚ùå Error al verificar balance:', error.message);
        if (error.response && error.response.data) {
            console.error('   Detalles del error:', error.response.data);
        }
        process.exit(1);
    }
}

// Ejecutar la verificaci√≥n
checkBalance()
    .then(() => {
        console.log('');
        console.log('üèÅ Verificaci√≥n de balance completada');
        process.exit(0);
    })
    .catch(error => {
        console.error('üí• Error fatal:', error.message);
        process.exit(1);
    });
