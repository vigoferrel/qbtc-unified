console.log('üöÄ Iniciando test completo del sistema de categorizaci√≥n...');
const { BinanceRealConnector } = require('./quantum-core/BinanceRealConnector');

async function testCompleteSystem() {
  try {
    console.log('üì° Creando instancia del BinanceRealConnector...');
    const connector = new BinanceRealConnector();
    
    console.log('üîÑ Inicializando el conector (modo simulaci√≥n)...');
    await connector.initialize();
    
    console.log('üìä Verificando categor√≠as pobladas...');
    const categories = connector.assetCategories;
    
    console.log('\n=== RESULTADOS DE CATEGORIZACI√ìN ===');
    console.log(`üåå UNIVERSO TOTAL: ${connector.allSymbols.length} s√≠mbolos`);
    console.log(`üèÜ Majors: ${categories.majors?.length || 0}`);
    console.log(`üöÄ Meme Coins: ${categories.memeCoins?.length || 0}`);
    console.log(`üåë Lado Oscuro: ${categories.darkSide?.length || 0}`);
    console.log(`üíé DeFi: ${categories.defi?.length || 0}`);
    console.log(`üéÆ Gaming: ${categories.gaming?.length || 0}`);
    console.log(`ü§ñ AI: ${categories.ai?.length || 0}`);
    console.log(`üîó Ex√≥ticos: ${categories.exotics?.length || 0}`);
    console.log(`üî• Alto Leverage: ${categories.leverageTargets?.length || 0}`);
    console.log(`‚ö° Arbitraje: ${categories.arbitrageTargets?.length || 0}`);
    
    if (categories.defi?.length > 0) {
      console.log(`\nüíé DeFi symbols: ${categories.defi.slice(0, 5).join(', ')}`);
    }
    if (categories.gaming?.length > 0) {
      console.log(`üéÆ Gaming symbols: ${categories.gaming.slice(0, 5).join(', ')}`);
    }
    if (categories.ai?.length > 0) {
      console.log(`ü§ñ AI symbols: ${categories.ai.slice(0, 5).join(', ')}`);
    }
    
    // Test adicional: verificar que los s√≠mbolos espec√≠ficos est√©n en las categor√≠as correctas
    console.log('\n=== VERIFICACI√ìN DE S√çMBOLOS ESPEC√çFICOS ===');
    
    const testSymbols = {
      'UNIUSDT': 'defi',
      'AXSUSDT': 'gaming', 
      'FETUSDT': 'ai',
      'BTCUSDT': 'majors',
      'DOGEUSDT': 'memeCoins'
    };
    
    for (const [symbol, expectedCategory] of Object.entries(testSymbols)) {
      const isInCategory = categories[expectedCategory]?.includes(symbol);
      const status = isInCategory ? '‚úÖ' : '‚ùå';
      console.log(`${status} ${symbol} en ${expectedCategory}: ${isInCategory ? 'S√ç' : 'NO'}`);
    }
    
    // Mostrar estad√≠sticas finales
    console.log('\n=== ESTAD√çSTICAS FINALES ===');
    const totalCategorized = Object.values(categories)
      .filter(cat => Array.isArray(cat))
      .reduce((sum, cat) => sum + cat.length, 0) - categories.allSymbols.length; // Restar allSymbols para evitar doble conteo
      
    console.log(`üìä Total s√≠mbolos categorizados: ${totalCategorized}`);
    console.log(`üìà Categor√≠as no vac√≠as: ${Object.entries(categories)
      .filter(([key, cat]) => Array.isArray(cat) && cat.length > 0 && key !== 'allSymbols')
      .length}`);
    
    console.log('\n‚úÖ Test completado exitosamente');
    
    // Verificar que DeFi, Gaming y AI ya no est√°n en 0
    const previouslyEmpty = ['defi', 'gaming', 'ai'];
    const stillEmpty = previouslyEmpty.filter(cat => (categories[cat]?.length || 0) === 0);
    
    if (stillEmpty.length === 0) {
      console.log('üéâ CORRECCI√ìN EXITOSA: Todas las categor√≠as (DeFi, Gaming, AI) ahora tienen s√≠mbolos!');
    } else {
      console.log(`‚ö†Ô∏è ADVERTENCIA: Las siguientes categor√≠as siguen vac√≠as: ${stillEmpty.join(', ')}`);
    }
    
    process.exit(0);
    
  } catch (error) {
    console.error('‚ùå Error en el test:', error.message);
    console.error(error.stack);
    process.exit(1);
  }
}

testCompleteSystem();
