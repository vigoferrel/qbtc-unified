/**
 * Script de prueba para verificar importaciones del system-integrator
 */

console.log('üîç Verificando importaciones del system-integrator...');

try {
    // Importar componentes principales
    console.log('üì¶ Importando componentes principales...');
    const { CredentialsManager } = require('./quantum-core/CredentialsManager');
    console.log('‚úÖ CredentialsManager importado');
    
    const { BinanceRealConnector } = require('./quantum-core/BinanceRealConnector');
    console.log('‚úÖ BinanceRealConnector importado');
    
    const { QuantumMarketMaker } = require('./quantum-core/QuantumMarketMaker');
    console.log('‚úÖ QuantumMarketMaker importado');
    
    const QuantumInfiniteCache = require('./quantum-core/QuantumInfiniteCache');
    console.log('‚úÖ QuantumInfiniteCache importado');
    
    const { QuantumUnifiedCore } = require('./quantum-core/QuantumUnifiedCore');
    console.log('‚úÖ QuantumUnifiedCore importado');
    
    const { QuantumCoherenceIntegrator } = require('./quantum-core/QuantumCoherenceIntegrator');
    console.log('‚úÖ QuantumCoherenceIntegrator importado');
    
    const { QuantumMonitoring } = require('./quantum-core/QuantumMonitoring');
    console.log('‚úÖ QuantumMonitoring importado');
    
    const { AdversityPrimePredictor } = require('./quantum-core/AdversityPrimePredictor');
    console.log('‚úÖ AdversityPrimePredictor importado');
    
    const { QuantumLeverageEngine } = require('./quantum-core/QuantumLeverageEngine');
    console.log('‚úÖ QuantumLeverageEngine importado');
    
    const { QuantumProfitMaximizer } = require('./quantum-core/QuantumProfitMaximizer');
    console.log('‚úÖ QuantumProfitMaximizer importado');
    
    const { AntiLiquidationEngine } = require('./quantum-core/AntiLiquidationEngine');
    console.log('‚úÖ AntiLiquidationEngine importado');
    
    const { QuantumNxNMatrix } = require('./quantum-core/QuantumNxNMatrix');
    console.log('‚úÖ QuantumNxNMatrix importado');
    
    const { UniversalSymbolMonitor } = require('./quantum-core/UniversalSymbolMonitor');
    console.log('‚úÖ UniversalSymbolMonitor importado');
    
    const { UniversalCorrelationAnalyzer } = require('./quantum-core/UniversalCorrelationAnalyzer');
    console.log('‚úÖ UniversalCorrelationAnalyzer importado');
    
    // Importar componentes Leonardo Consciousness
    console.log('üß† Importando componentes Leonardo Consciousness...');
    const { LeonardoDecisionEngine } = require('./leonardo-consciousness/LeonardoDecisionEngine');
    console.log('‚úÖ LeonardoDecisionEngine importado');
    
    const { FundsManager } = require('./leonardo-consciousness/FundsManager');
    console.log('‚úÖ FundsManager importado');
    
    const { TradingEngineLayer } = require('./leonardo-consciousness/TradingEngineLayer');
    console.log('‚úÖ TradingEngineLayer importado');
    
    const { BinanceConnectorAdapter } = require('./leonardo-consciousness/BinanceConnectorAdapter');
    console.log('‚úÖ BinanceConnectorAdapter importado');
    
    const { QuantumUnifiedSystem } = require('./leonardo-consciousness/QuantumUnifiedSystem');
    console.log('‚úÖ QuantumUnifiedSystem importado');
    
    const { UnifiedLeonardoCore } = require('./leonardo-consciousness/UnifiedLeonardoCore');
    console.log('‚úÖ UnifiedLeonardoCore importado');
    
    const { LeonardoQuantumServer } = require('./leonardo-consciousness/LeonardoQuantumServer');
    console.log('‚úÖ LeonardoQuantumServer importado');
    
    const { UnifiedLeonardoServer } = require('./leonardo-consciousness/UnifiedLeonardoServer');
    console.log('‚úÖ UnifiedLeonardoServer importado');
    
    const { FundsManagerLayer } = require('./leonardo-consciousness/FundsManagerLayer');
    console.log('‚úÖ FundsManagerLayer importado');
    
    // Importar componentes de gesti√≥n de errores
    console.log('üõ°Ô∏è Importando componentes de gesti√≥n de errores...');
    const { QuantumErrorHandler } = require('./quantum-error-handler');
    console.log('‚úÖ QuantumErrorHandler importado');
    
    const { ApiKeyManager } = require('./api-key-manager');
    console.log('‚úÖ ApiKeyManager importado');
    
    console.log('üéâ ¬°Todas las importaciones exitosas!');
    
} catch (error) {
    console.error('‚ùå Error en importaci√≥n:', error.message);
    console.error('Stack trace:', error.stack);
    process.exit(1);
}
