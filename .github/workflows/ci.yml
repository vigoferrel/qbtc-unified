name: üöÄ QBTC-UNIFIED CI/CD Pipeline

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main ]
  release:
    types: [ published ]

env:
  NODE_VERSION: '18.x'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ====================================
  # Code Quality & Security Checks
  # ====================================
  quality-check:
    name: üîç Quality & Security Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: ‚ö° Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: üì¶ Install dependencies
      run: |
        npm ci --only=production
        npm ci --only=dev

    - name: üîß Lint JavaScript/TypeScript
      run: npm run lint --if-present

    - name: üé® Check code formatting
      run: npm run format:check --if-present

    - name: üîí Security audit
      run: npm audit --audit-level=high
      continue-on-error: true

    - name: üõ°Ô∏è CodeQL Analysis
      uses: github/codeql-action/init@v2
      with:
        languages: javascript

    - name: üõ°Ô∏è Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

  # ====================================
  # Testing Suite
  # ====================================
  test:
    name: üß™ Test Suite
    runs-on: ubuntu-latest
    needs: quality-check
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4

    - name: ‚ö° Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: üì¶ Install dependencies
      run: npm ci

    - name: üß™ Run unit tests
      run: npm test --if-present
      env:
        NODE_ENV: test

    - name: üìä Generate coverage report
      run: npm run coverage --if-present

    - name: üìà Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./coverage/lcov.info
        fail_ci_if_error: false

  # ====================================
  # System Health Checks
  # ====================================
  health-check:
    name: üè• System Health Check
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4

    - name: ‚ö° Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: üì¶ Install dependencies
      run: npm ci

    - name: üîß Validate system configuration
      run: |
        node --version
        npm --version
        echo "‚úÖ Node.js environment ready"

    - name: üöÄ Test service startup
      run: |
        echo "Testing core services startup..."
        timeout 30s npm start --if-present &
        sleep 5
        echo "‚úÖ Services can start successfully"
      continue-on-error: true

    - name: üîç Check for critical files
      run: |
        ls -la package.json README.md LICENSE .env.example
        echo "‚úÖ Critical files present"

  # ====================================
  # Build & Package
  # ====================================
  build:
    name: üèóÔ∏è Build & Package
    runs-on: ubuntu-latest
    needs: [quality-check, test]
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4

    - name: ‚ö° Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: üì¶ Install dependencies
      run: npm ci

    - name: üèóÔ∏è Build application
      run: npm run build --if-present
      env:
        NODE_ENV: production

    - name: üì¶ Create deployment artifact
      run: |
        tar -czf qbtc-unified-${{ github.sha }}.tar.gz \
          package.json \
          package-lock.json \
          lib/ \
          services/ \
          scripts/ \
          README.md \
          LICENSE \
          .env.example

    - name: üì§ Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: qbtc-unified-build-${{ github.sha }}
        path: qbtc-unified-${{ github.sha }}.tar.gz
        retention-days: 30

  # ====================================
  # Security Scanning
  # ====================================
  security-scan:
    name: üõ°Ô∏è Security Scanning
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4

    - name: üõ°Ô∏è Run Snyk Security Scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high
      continue-on-error: true

    - name: üîí OWASP Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'QBTC-UNIFIED'
        path: '.'
        format: 'ALL'
      continue-on-error: true

  # ====================================
  # Release & Deploy (only on tags)
  # ====================================
  release:
    name: üöÄ Release & Deploy
    runs-on: ubuntu-latest
    needs: [health-check, build, security-scan]
    if: github.event_name == 'release' && github.event.action == 'published'
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4

    - name: ‚ö° Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: üì¶ Install dependencies
      run: npm ci

    - name: üì§ Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: qbtc-unified-build-${{ github.sha }}

    - name: üè∑Ô∏è Create release notes
      run: |
        echo "## üöÄ QBTC-UNIFIED Release ${{ github.ref_name }}" > release-notes.md
        echo "" >> release-notes.md
        echo "### ‚ú® Changes" >> release-notes.md
        git log --pretty=format:"- %s" $(git describe --tags --abbrev=0 HEAD^)..HEAD >> release-notes.md
        echo "" >> release-notes.md
        echo "### üîß Technical Details" >> release-notes.md
        echo "- Node.js: ${{ env.NODE_VERSION }}" >> release-notes.md
        echo "- Build: ${{ github.sha }}" >> release-notes.md
        echo "- Date: $(date -u +%Y-%m-%d\ %H:%M:%S\ UTC)" >> release-notes.md

    - name: üìã Update release with artifacts
      uses: softprops/action-gh-release@v1
      with:
        files: |
          qbtc-unified-${{ github.sha }}.tar.gz
        body_path: release-notes.md
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # ====================================
  # Notification & Monitoring
  # ====================================
  notify:
    name: üì¢ Notifications
    runs-on: ubuntu-latest
    needs: [quality-check, test, health-check, build]
    if: always()
    
    steps:
    - name: üìß Notify on success
      if: needs.build.result == 'success'
      run: |
        echo "‚úÖ QBTC-UNIFIED Pipeline Success!"
        echo "Commit: ${{ github.sha }}"
        echo "Branch: ${{ github.ref_name }}"
        echo "Triggered by: ${{ github.event_name }}"

    - name: ‚ö†Ô∏è Notify on failure
      if: failure()
      run: |
        echo "‚ùå QBTC-UNIFIED Pipeline Failed!"
        echo "Please check the logs and fix issues."
        echo "Commit: ${{ github.sha }}"
        echo "Branch: ${{ github.ref_name }}"

# ====================================
# Advanced Workflow Features
# ====================================
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
